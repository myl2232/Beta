//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AlphaWork_UIExtensionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("UIExtension");
		L.RegFunction("FadeToAlpha", FadeToAlpha);
		L.RegFunction("SmoothValue", SmoothValue);
		L.RegFunction("HasUIForm", HasUIForm);
		L.RegFunction("GetUIForm", GetUIForm);
		L.RegFunction("CloseUIForm", CloseUIForm);
		L.RegFunction("OpenUIForm", OpenUIForm);
		L.RegFunction("OpenDialog", OpenDialog);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FadeToAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.CanvasGroup arg0 = (UnityEngine.CanvasGroup)ToLua.CheckObject(L, 1, typeof(UnityEngine.CanvasGroup));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			System.Collections.IEnumerator o = AlphaWork.UIExtension.FadeToAlpha(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SmoothValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.UI.Slider arg0 = (UnityEngine.UI.Slider)ToLua.CheckObject<UnityEngine.UI.Slider>(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			System.Collections.IEnumerator o = AlphaWork.UIExtension.SmoothValue(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasUIForm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<AlphaWork.UIFormId>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				AlphaWork.UIFormId arg1 = (AlphaWork.UIFormId)ToLua.ToObject(L, 2);
				bool o = AlphaWork.UIExtension.HasUIForm(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				bool o = AlphaWork.UIExtension.HasUIForm(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<AlphaWork.UIFormId, string>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				AlphaWork.UIFormId arg1 = (AlphaWork.UIFormId)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				bool o = AlphaWork.UIExtension.HasUIForm(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, string>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				bool o = AlphaWork.UIExtension.HasUIForm(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AlphaWork.UIExtension.HasUIForm");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIForm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<AlphaWork.UIFormId>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				AlphaWork.UIFormId arg1 = (AlphaWork.UIFormId)ToLua.ToObject(L, 2);
				AlphaWork.UGuiForm o = AlphaWork.UIExtension.GetUIForm(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				AlphaWork.UGuiForm o = AlphaWork.UIExtension.GetUIForm(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<AlphaWork.UIFormId, string>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				AlphaWork.UIFormId arg1 = (AlphaWork.UIFormId)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				AlphaWork.UGuiForm o = AlphaWork.UIExtension.GetUIForm(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, string>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				AlphaWork.UGuiForm o = AlphaWork.UIExtension.GetUIForm(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AlphaWork.UIExtension.GetUIForm");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseUIForm(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			AlphaWork.UGuiForm arg1 = (AlphaWork.UGuiForm)ToLua.CheckObject<AlphaWork.UGuiForm>(L, 2);
			AlphaWork.UIExtension.CloseUIForm(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenUIForm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<AlphaWork.UIFormId>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				AlphaWork.UIFormId arg1 = (AlphaWork.UIFormId)ToLua.ToObject(L, 2);
				System.Nullable<int> o = AlphaWork.UIExtension.OpenUIForm(arg0, arg1);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				System.Nullable<int> o = AlphaWork.UIExtension.OpenUIForm(arg0, arg1);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<AlphaWork.UIFormId, object>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				AlphaWork.UIFormId arg1 = (AlphaWork.UIFormId)ToLua.ToObject(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				System.Nullable<int> o = AlphaWork.UIExtension.OpenUIForm(arg0, arg1, arg2);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, object>(L, 2))
			{
				UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				System.Nullable<int> o = AlphaWork.UIExtension.OpenUIForm(arg0, arg1, arg2);
				ToLua.PusNullable(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AlphaWork.UIExtension.OpenUIForm");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenDialog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.UIComponent arg0 = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			AlphaWork.DialogParams arg1 = (AlphaWork.DialogParams)ToLua.CheckObject<AlphaWork.DialogParams>(L, 2);
			AlphaWork.UIExtension.OpenDialog(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

