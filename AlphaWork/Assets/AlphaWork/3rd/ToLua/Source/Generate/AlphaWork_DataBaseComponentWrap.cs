//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AlphaWork_DataBaseComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AlphaWork.DataBaseComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("GetPlayerByName", GetPlayerByName);
		L.RegFunction("FetchPlayersByName", FetchPlayersByName);
		L.RegFunction("AddPlayer", AddPlayer);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DataBaseType", get_DataBaseType, set_DataBaseType);
		L.RegVar("ClearPlayer", get_ClearPlayer, set_ClearPlayer);
		L.RegVar("Players", get_Players, null);
		L.RegVar("DataDevice", get_DataDevice, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayerByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AlphaWork.DataBaseComponent obj = (AlphaWork.DataBaseComponent)ToLua.CheckObject<AlphaWork.DataBaseComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Collections.Generic.List<AlphaWork.UPlayer> o = obj.GetPlayerByName(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FetchPlayersByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AlphaWork.DataBaseComponent obj = (AlphaWork.DataBaseComponent)ToLua.CheckObject<AlphaWork.DataBaseComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.FetchPlayersByName(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AlphaWork.DataBaseComponent obj = (AlphaWork.DataBaseComponent)ToLua.CheckObject<AlphaWork.DataBaseComponent>(L, 1);
			AlphaWork.UPlayer arg0 = (AlphaWork.UPlayer)ToLua.CheckObject<AlphaWork.UPlayer>(L, 2);
			obj.AddPlayer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DataBaseType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AlphaWork.DataBaseComponent obj = (AlphaWork.DataBaseComponent)o;
			AlphaWork.DataBaseType ret = obj.DataBaseType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DataBaseType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClearPlayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AlphaWork.DataBaseComponent obj = (AlphaWork.DataBaseComponent)o;
			bool ret = obj.ClearPlayer;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ClearPlayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Players(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AlphaWork.DataBaseComponent obj = (AlphaWork.DataBaseComponent)o;
			System.Collections.Generic.List<AlphaWork.UPlayer> ret = obj.Players;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Players on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DataDevice(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AlphaWork.DataBaseComponent obj = (AlphaWork.DataBaseComponent)o;
			AlphaWork.IDataDevice ret = obj.DataDevice;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DataDevice on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DataBaseType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AlphaWork.DataBaseComponent obj = (AlphaWork.DataBaseComponent)o;
			AlphaWork.DataBaseType arg0 = (AlphaWork.DataBaseType)ToLua.CheckObject(L, 2, typeof(AlphaWork.DataBaseType));
			obj.DataBaseType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DataBaseType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ClearPlayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AlphaWork.DataBaseComponent obj = (AlphaWork.DataBaseComponent)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ClearPlayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ClearPlayer on a nil value");
		}
	}
}

