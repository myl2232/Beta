//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AlphaWork_LuaScriptComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AlphaWork.LuaScriptComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("StartLuaVM", StartLuaVM);
		L.RegFunction("ClearLuaVM", ClearLuaVM);
		L.RegFunction("LoadFile", LoadFile);
		L.RegFunction("UnloadFile", UnloadFile);
		L.RegFunction("DoString", DoString);
		L.RegFunction("DoFile", DoFile);
		L.RegFunction("RegistGameObject2Lua", RegistGameObject2Lua);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("LuaAssetExtInBundle", get_LuaAssetExtInBundle, null);
		L.RegVar("LuaState", get_LuaState, null);
		L.RegFunction("OnLoadScriptSuccess", AlphaWork_LuaScriptComponent_OnLoadScriptSuccess);
		L.RegFunction("OnLoadScriptFailure", AlphaWork_LuaScriptComponent_OnLoadScriptFailure);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartLuaVM(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AlphaWork.LuaScriptComponent obj = (AlphaWork.LuaScriptComponent)ToLua.CheckObject<AlphaWork.LuaScriptComponent>(L, 1);
			obj.StartLuaVM();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearLuaVM(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AlphaWork.LuaScriptComponent obj = (AlphaWork.LuaScriptComponent)ToLua.CheckObject<AlphaWork.LuaScriptComponent>(L, 1);
			obj.ClearLuaVM();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				AlphaWork.LuaScriptComponent obj = (AlphaWork.LuaScriptComponent)ToLua.CheckObject<AlphaWork.LuaScriptComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				AlphaWork.LuaScriptComponent.OnLoadScriptSuccess arg2 = (AlphaWork.LuaScriptComponent.OnLoadScriptSuccess)ToLua.CheckDelegate<AlphaWork.LuaScriptComponent.OnLoadScriptSuccess>(L, 4);
				obj.LoadFile(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				AlphaWork.LuaScriptComponent obj = (AlphaWork.LuaScriptComponent)ToLua.CheckObject<AlphaWork.LuaScriptComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				AlphaWork.LuaScriptComponent.OnLoadScriptSuccess arg2 = (AlphaWork.LuaScriptComponent.OnLoadScriptSuccess)ToLua.CheckDelegate<AlphaWork.LuaScriptComponent.OnLoadScriptSuccess>(L, 4);
				AlphaWork.LuaScriptComponent.OnLoadScriptFailure arg3 = (AlphaWork.LuaScriptComponent.OnLoadScriptFailure)ToLua.CheckDelegate<AlphaWork.LuaScriptComponent.OnLoadScriptFailure>(L, 5);
				obj.LoadFile(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AlphaWork.LuaScriptComponent.LoadFile");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AlphaWork.LuaScriptComponent obj = (AlphaWork.LuaScriptComponent)ToLua.CheckObject<AlphaWork.LuaScriptComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.UnloadFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				AlphaWork.LuaScriptComponent obj = (AlphaWork.LuaScriptComponent)ToLua.CheckObject<AlphaWork.LuaScriptComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.DoString(arg0);
				return 0;
			}
			else if (count == 3)
			{
				AlphaWork.LuaScriptComponent obj = (AlphaWork.LuaScriptComponent)ToLua.CheckObject<AlphaWork.LuaScriptComponent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.DoString(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AlphaWork.LuaScriptComponent.DoString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AlphaWork.LuaScriptComponent obj = (AlphaWork.LuaScriptComponent)ToLua.CheckObject<AlphaWork.LuaScriptComponent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DoFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegistGameObject2Lua(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			AlphaWork.LuaScriptComponent obj = (AlphaWork.LuaScriptComponent)ToLua.CheckObject<AlphaWork.LuaScriptComponent>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			obj.RegistGameObject2Lua(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaAssetExtInBundle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, AlphaWork.LuaScriptComponent.LuaAssetExtInBundle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AlphaWork.LuaScriptComponent obj = (AlphaWork.LuaScriptComponent)o;
			LuaInterface.LuaState ret = obj.LuaState;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LuaState on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AlphaWork_LuaScriptComponent_OnLoadScriptSuccess(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<AlphaWork.LuaScriptComponent.OnLoadScriptSuccess>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<AlphaWork.LuaScriptComponent.OnLoadScriptSuccess>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AlphaWork_LuaScriptComponent_OnLoadScriptFailure(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<AlphaWork.LuaScriptComponent.OnLoadScriptFailure>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<AlphaWork.LuaScriptComponent.OnLoadScriptFailure>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

