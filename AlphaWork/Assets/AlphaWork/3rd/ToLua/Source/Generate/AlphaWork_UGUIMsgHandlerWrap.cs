//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AlphaWork_UGUIMsgHandlerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AlphaWork.UGUIMsgHandler), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetMsgTable", SetMsgTable);
		L.RegFunction("Touch", Touch);
		L.RegFunction("AddLuaEventHandler", AddLuaEventHandler);
		L.RegFunction("UnTouch", UnTouch);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("HoldTime", get_HoldTime, set_HoldTime);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMsgTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			AlphaWork.UGUIMsgHandler obj = (AlphaWork.UGUIMsgHandler)ToLua.CheckObject<AlphaWork.UGUIMsgHandler>(L, 1);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
			obj.SetMsgTable(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Touch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AlphaWork.UGUIMsgHandler obj = (AlphaWork.UGUIMsgHandler)ToLua.CheckObject<AlphaWork.UGUIMsgHandler>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.Touch(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLuaEventHandler(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			AlphaWork.UGUIMsgHandler obj = (AlphaWork.UGUIMsgHandler)ToLua.CheckObject<AlphaWork.UGUIMsgHandler>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.AddLuaEventHandler(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnTouch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AlphaWork.UGUIMsgHandler obj = (AlphaWork.UGUIMsgHandler)ToLua.CheckObject<AlphaWork.UGUIMsgHandler>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.UnTouch(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HoldTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AlphaWork.UGUIMsgHandler obj = (AlphaWork.UGUIMsgHandler)o;
			float ret = obj.HoldTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HoldTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HoldTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AlphaWork.UGUIMsgHandler obj = (AlphaWork.UGUIMsgHandler)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.HoldTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HoldTime on a nil value");
		}
	}
}

