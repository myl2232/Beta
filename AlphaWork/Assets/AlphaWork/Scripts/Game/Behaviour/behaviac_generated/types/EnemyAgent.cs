// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using UnityEngine;
using AlphaWork;
using GameFramework.Event;
///<<< END WRITING YOUR CODE

public class EnemyAgent : BaseAgent
///<<< BEGIN WRITING YOUR CODE EnemyAgent
///<<< END WRITING YOUR CODE
{
	private float attackParam = 0f;
	public void _set_attackParam(float value)
	{
		attackParam = value;
	}
	public float _get_attackParam()
	{
		return attackParam;
	}

	public void CheckSensor()
	{
///<<< BEGIN WRITING YOUR CODE CheckSensor
        ////本该是状态机的工作，但是目前状态机的transition不支持右值参数，只能是数值
        UnityGameFramework.Runtime.Entity etEnemy = GameEntry.Entity.GetEntity(m_senseResult);
        int logicSt = -1;
        if (etEnemy != null)
        {
            if (Vector3.Distance(etEnemy.transform.position, m_parent.transform.position) <= m_LogicData.AttackRadius)
            {
                logicSt = (int)LogicStatus.ELogic_ATTACK;
                m_character.SyncStatus(logicSt);
            }
            else if (Vector3.Distance(etEnemy.transform.position, m_parent.transform.position) <= m_LogicData.SenseRadius)
            {
                logicSt = (int)LogicStatus.ELogic_TRACK;
                m_character.SyncStatus(logicSt);
            }
            else
            {
                logicSt = (int)LogicStatus.ELogic_PATROL;
                m_character.SyncStatus(logicSt);
            }
            m_nextTarget = etEnemy.transform.position;
        }
        else
        {
            m_character.SyncStatus((int)LogicStatus.ELogic_IDLE);
        }
        _set_logicStatus((LogicStatus)logicSt);
        DispatchActions();
        ///<<< END WRITING YOUR CODE
	}

	public void FlushSensor()
	{
///<<< BEGIN WRITING YOUR CODE FlushSensor
        if(m_ai != null)
            m_ai.ExecSensor(m_parent.Id);
        ///<<< END WRITING YOUR CODE
	}

///<<< BEGIN WRITING YOUR CODE CLASS_PART

    private SensorAICircle m_ai;
    private BehaviacTrigger m_trigger;
    private MoveTarget m_moveTarget;
    private AlphaWork.EntityObject m_parent;
    private int m_senseResult;
    public int SenseResult
    {
		get { return m_senseResult; }
        set { m_senseResult = value; }
    }
    private Vector3 m_nextTarget;
    private Vector3 m_MoveStartPos;
    private BaseCharacter m_character;
    TargetableObjectData m_LogicData;

    public void InitAI()
    {
        m_parent = AlphaWork.GameEntry.Entity.GetEntity(m_ParentId).Logic as AlphaWork.EntityObject;
        GameObject gb = m_parent.Entity.Handle as GameObject;

        EntityObject en = m_parent.Entity.Logic as EntityObject;
        m_LogicData = en.Data as TargetableObjectData;

        m_ai = gb.AddComponent<SensorAICircle>();
        m_ai.Radius = m_LogicData.SenseRadius;
        m_ai.ParentId = m_parent.Id;
        m_trigger = gb.AddComponent<BehaviacTrigger>();
        m_trigger.Parent = m_parent.Entity.Logic as EntityObject;        
        m_moveTarget = gb.AddComponent<MoveTarget>();
        m_character = gb.GetComponent<BaseCharacter>();

        GameEntry.Event.Subscribe(MoveToTargetEventArgs.EventId, OnMoveToTarget);
        
        m_MoveStartPos = new Vector3();
    }

    protected void MoveToTarget()
    {
        FaceToTarget();
        GameObject gb = m_parent.Entity.Handle as GameObject;
        if (m_nextTarget.x == 0 || Vector3.Distance(gb.transform.position, m_nextTarget) < 0.5f)
            m_nextTarget = GetTargetPos();

        GameEntry.Event.Fire(this, new MoveToTargetEventArgs(m_ParentId, m_nextTarget));
    }    

    protected void FaceToTarget()
    {
        GameObject gb = m_parent.Entity.Handle as GameObject;
        gb.transform.forward = m_nextTarget - gb.transform.position;
    }

    protected void OnMoveToTarget(object sender, GameEventArgs e)
    {
        MoveToTargetEventArgs mvArgs = e as MoveToTargetEventArgs;
        if(mvArgs.EId == m_ParentId)
        {
            GameObject gb = m_parent.Entity.Handle as GameObject;
            m_MoveStartPos = gb.transform.position;            

            if (m_moveTarget)
                m_moveTarget.Move(m_MoveStartPos, mvArgs.MovePos);
        }
    }

    protected Vector3 GetTargetPos()
    {
        UnityGameFramework.Runtime.Entity etEnemy = GameEntry.Entity.GetEntity(m_senseResult);
        if (etEnemy != null)
        {
            return etEnemy.transform.position;
        }
        else
        {
            GameObject target = new GameObject();
            GameEntry.Behaviac.GetNextTarget(m_parent.transform.position, ref target);
            return target.transform.position;
        }
    }

    protected void DispatchActions()
    {
        LogicStatus status = _get_logicStatus();
        if (status == LogicStatus.ELogic_ATTACK)
        {
            m_moveTarget.Pause();
            m_character.ActionAttack(attackParam);
        }
        else if (status == LogicStatus.ELogic_PATROL)
        {
            m_character.ActionPatrol(m_LogicData.walkSpeed);
            m_moveTarget.Speed = m_LogicData.walkSpeed;
            MoveToTarget();
        }
        else if (status == LogicStatus.ELogic_TRACK)
        {
            m_character.ActionPatrol(m_LogicData.runSpeed);
            m_moveTarget.Speed = m_LogicData.runSpeed;
            MoveToTarget();
        }
        else if(status == LogicStatus.ELogic_IDLE)
        {
            m_character.ActionIdle();
        }
    }
    ///<<< END WRITING YOUR CODE

}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

