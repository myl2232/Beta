// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using UnityEngine;
using AlphaWork;
using GameFramework.Event;
///<<< END WRITING YOUR CODE

public class EnemyAgent : BaseAgent
///<<< BEGIN WRITING YOUR CODE EnemyAgent
///<<< END WRITING YOUR CODE
{
	private int attackIndex = 0;
	public void _set_attackIndex(int value)
	{
		attackIndex = value;
	}
	public int _get_attackIndex()
	{
		return attackIndex;
	}

	private float attackParam = 0f;
	public void _set_attackParam(float value)
	{
		attackParam = value;
	}
	public float _get_attackParam()
	{
		return attackParam;
	}

	private bool CurrentAnimStateEnd = false;
	public void _set_CurrentAnimStateEnd(bool value)
	{
		CurrentAnimStateEnd = value;
	}
	public bool _get_CurrentAnimStateEnd()
	{
		return CurrentAnimStateEnd;
	}

	public void ActionAttack()
	{
///<<< BEGIN WRITING YOUR CODE ActionAttack

        m_moveTarget.Pause();
        m_pAnimator.SetFloat("BlendAttack", attackParam);
        m_pAnimator.SetTrigger("Attack");        
       
        ///<<< END WRITING YOUR CODE
	}

	public void ActionHurt()
	{
///<<< BEGIN WRITING YOUR CODE ActionHurt
///<<< END WRITING YOUR CODE
	}

	public void ActionIdle()
	{
///<<< BEGIN WRITING YOUR CODE ActionIdle

        LogicStatus status = LogicStatus.ELogic_IDLE;
        int nStatus = m_pAnimator.GetInteger("status");
        if (nStatus == (int)status)
            return;

        ///<<< END WRITING YOUR CODE
	}

	public void ActionPatrol(float speed)
	{
///<<< BEGIN WRITING YOUR CODE ActionPatrol

        m_pAnimator.SetFloat("MotionBlend", speed);
        m_moveTarget.Scale = speed;
        MoveToTarget();
        ///<<< END WRITING YOUR CODE
	}

	public bool CheckActionEnd()
	{
///<<< BEGIN WRITING YOUR CODE CheckActionEnd
        AnimatorStateInfo animatorInfo;
        animatorInfo = m_pAnimator.GetCurrentAnimatorStateInfo(0);
        if (animatorInfo.normalizedTime >= 1.0f)
            CurrentAnimStateEnd = true;
        else
            CurrentAnimStateEnd = false;

        return CurrentAnimStateEnd;
        ///<<< END WRITING YOUR CODE
	}

	public void CheckSensor()
	{
///<<< BEGIN WRITING YOUR CODE CheckSensor
////本该是状态机的工作，但是目前状态机的transition不支持右值参数，只能是数值
        UnityGameFramework.Runtime.Entity etEnemy = GameEntry.Entity.GetEntity(m_senseResult);
        int logicSt = -1;
        if (etEnemy != null)
        {
            if (Vector3.Distance(etEnemy.transform.position, m_parent.transform.position) <= _get_attackRadius())
            {
                logicSt = (int)LogicStatus.ELogic_ATTACK;
                m_pAnimator.SetInteger("status", logicSt);
            }
            else if (Vector3.Distance(etEnemy.transform.position, m_parent.transform.position) <= _get_senseRadius())
            {
                logicSt = (int)LogicStatus.ELogic_TRACK;
                m_pAnimator.SetInteger("status", (int)LogicStatus.ELogic_PATROL);
            }
            else
            {
                logicSt = (int)LogicStatus.ELogic_PATROL;
                m_pAnimator.SetInteger("status", logicSt);
            }
            m_nextTarget = etEnemy.transform.position;
            m_nextTarget.z += GetMoveOffsetZ();
        }
        else
        {
            logicSt = (int)LogicStatus.ELogic_PATROL;
            m_pAnimator.SetInteger("status", (int)LogicStatus.ELogic_PATROL);
        }
        _set_logicStatus((LogicStatus)logicSt);
        DispatchActions();
        ///<<< END WRITING YOUR CODE
	}

	public void FlushSensor()
	{
///<<< BEGIN WRITING YOUR CODE FlushSensor
        if(m_ai != null)
            m_ai.ExecSensor(m_parent.Id);
        ///<<< END WRITING YOUR CODE
	}

	public void MoveToTarget()
	{
///<<< BEGIN WRITING YOUR CODE MoveToTarget
        ///
        FaceToTarget();
        GameObject gb = m_parent.Entity.Handle as GameObject;
        if (m_nextTarget.x == 0 ||Vector3.Distance(gb.transform.position,m_nextTarget) < 0.5f)
            RecordTarget();
        MoveImpl();
        ///<<< END WRITING YOUR CODE
	}

///<<< BEGIN WRITING YOUR CODE CLASS_PART

    private SensorAICircle m_ai;
    private BehaviacTrigger m_trigger;
    //private BehaviourMove m_move;//temp removed,replace by behaviour
    private MoveTarget m_moveTarget;
    private AlphaWork.EntityObject m_parent;
    private int m_senseResult;
    public int SenseResult
    {
				get { return m_senseResult; }
        set { m_senseResult = value; }
    }
    private Vector3 m_nextTarget;
    private Vector3 m_MoveStartPos;
    private Animator m_pAnimator;
//     protected void _initMove()
//     {
//         m_move = (m_parent.Entity.Handle as GameObject).AddComponent<BehaviourMove>();
//         m_move.Parent = m_parent;
//     }

    public void InitAI()
    {
        m_parent = AlphaWork.GameEntry.Entity.GetEntity(m_ParentId).Logic as AlphaWork.EntityObject;
        GameObject gb = m_parent.Entity.Handle as GameObject;

        m_ai = gb.AddComponent<SensorAICircle>();
        m_ai.Radius = _get_senseRadius();
        m_ai.ParentId = m_parent.Id;
        m_trigger = gb.AddComponent<BehaviacTrigger>();
        m_trigger.Parent = m_parent.Entity.Logic as EntityObject;

        m_pAnimator = gb.GetComponent<Animator>();
        m_moveTarget = gb.AddComponent<MoveTarget>();
        GameEntry.Event.Subscribe(MoveToTargetEventArgs.EventId, OnMoveToTarget);
        //_initMove();//temperary,will be removed
        m_MoveStartPos = new Vector3();
    }

    protected void RecordTarget()
    {
        m_nextTarget = GetTargetPos();
        m_nextTarget.z += GetMoveOffsetZ();
    }

    protected void MoveImpl()
    {
        GameEntry.Event.Fire(this, new MoveToTargetEventArgs(m_ParentId, m_nextTarget));
    }

    protected void FaceToTarget()
    {
        GameObject gb = m_parent.Entity.Handle as GameObject;

        gb.transform.forward = m_nextTarget - gb.transform.position;
    }

    protected void OnMoveToTarget(object sender, GameEventArgs e)
    {
        MoveToTargetEventArgs mvArgs = e as MoveToTargetEventArgs;
        if(mvArgs.EId == m_ParentId)
        {
            GameObject gb = m_parent.Entity.Handle as GameObject;
            m_MoveStartPos = gb.transform.position;
            m_MoveStartPos.z += GetMoveOffsetZ();

            if (m_moveTarget)
                m_moveTarget.Move(m_MoveStartPos, mvArgs.MovePos);

        }
    }

    protected Vector3 GetTargetPos()
    {
        UnityGameFramework.Runtime.Entity etEnemy = GameEntry.Entity.GetEntity(m_senseResult);
        if (etEnemy != null)
        {
            return etEnemy.transform.position;
        }
        else
        {
            GameObject target = new GameObject();
            GameEntry.Behaviac.GetNextTarget(m_parent.transform.position, ref target);
            return target.transform.position;
        }
    }
    protected float GetMoveOffsetZ()
    {
        return 0;
        //GameObject gb = m_parent.Entity.Handle as GameObject;
        //return -gb.GetComponent<CapsuleCollider>().height * 0.5f;
    }

    protected void DispatchActions()
    {
        LogicStatus status = _get_logicStatus();
        if (status == LogicStatus.ELogic_ATTACK)
            ActionAttack();
        else if (status == LogicStatus.ELogic_PATROL)
            ActionPatrol(0.3f);
        else if (status == LogicStatus.ELogic_TRACK)
            ActionPatrol(0.8f);
    }
    ///<<< END WRITING YOUR CODE

}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

